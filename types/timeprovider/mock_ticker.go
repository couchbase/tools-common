// Code generated by mockery v2.53.4. DO NOT EDIT.

package timeprovider

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockTicker is an autogenerated mock type for the Ticker type
type MockTicker struct {
	mock.Mock
}

// Channel provides a mock function with no fields
func (_m *MockTicker) Channel() <-chan time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func() <-chan time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// Start provides a mock function with given fields: duration
func (_m *MockTicker) Start(duration time.Duration) {
	_m.Called(duration)
}

// Stop provides a mock function with no fields
func (_m *MockTicker) Stop() {
	_m.Called()
}

// NewMockTicker creates a new instance of MockTicker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTicker(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockTicker {
	mock := &MockTicker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

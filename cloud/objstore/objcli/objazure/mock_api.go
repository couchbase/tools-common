// Code generated by MockGen. DO NOT EDIT.
// Source: ./api.go

// Package objazure is a generated GoMock package.
package objazure

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	azblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"
	blob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/blob"
	blockblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/blockblob"
	container "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/container"
	sas "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/sas"
	gomock "github.com/golang/mock/gomock"
)

// MockserviceAPI is a mock of serviceAPI interface.
type MockserviceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockserviceAPIMockRecorder
}

// MockserviceAPIMockRecorder is the mock recorder for MockserviceAPI.
type MockserviceAPIMockRecorder struct {
	mock *MockserviceAPI
}

// NewMockserviceAPI creates a new mock instance.
func NewMockserviceAPI(ctrl *gomock.Controller) *MockserviceAPI {
	mock := &MockserviceAPI{ctrl: ctrl}
	mock.recorder = &MockserviceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceAPI) EXPECT() *MockserviceAPIMockRecorder {
	return m.recorder
}

// NewContainerClient mocks base method.
func (m *MockserviceAPI) NewContainerClient(containerName string) containerAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContainerClient", containerName)
	ret0, _ := ret[0].(containerAPI)
	return ret0
}

// NewContainerClient indicates an expected call of NewContainerClient.
func (mr *MockserviceAPIMockRecorder) NewContainerClient(containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContainerClient", reflect.TypeOf((*MockserviceAPI)(nil).NewContainerClient), containerName)
}

// MockcontainerAPI is a mock of containerAPI interface.
type MockcontainerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockcontainerAPIMockRecorder
}

// MockcontainerAPIMockRecorder is the mock recorder for MockcontainerAPI.
type MockcontainerAPIMockRecorder struct {
	mock *MockcontainerAPI
}

// NewMockcontainerAPI creates a new mock instance.
func NewMockcontainerAPI(ctrl *gomock.Controller) *MockcontainerAPI {
	mock := &MockcontainerAPI{ctrl: ctrl}
	mock.recorder = &MockcontainerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcontainerAPI) EXPECT() *MockcontainerAPIMockRecorder {
	return m.recorder
}

// NewBlobClient mocks base method.
func (m *MockcontainerAPI) NewBlobClient(blobName string) blobAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBlobClient", blobName)
	ret0, _ := ret[0].(blobAPI)
	return ret0
}

// NewBlobClient indicates an expected call of NewBlobClient.
func (mr *MockcontainerAPIMockRecorder) NewBlobClient(blobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlobClient", reflect.TypeOf((*MockcontainerAPI)(nil).NewBlobClient), blobName)
}

// NewBlockBlobClient mocks base method.
func (m *MockcontainerAPI) NewBlockBlobClient(blobName string) blockBlobAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBlockBlobClient", blobName)
	ret0, _ := ret[0].(blockBlobAPI)
	return ret0
}

// NewBlockBlobClient indicates an expected call of NewBlockBlobClient.
func (mr *MockcontainerAPIMockRecorder) NewBlockBlobClient(blobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlockBlobClient", reflect.TypeOf((*MockcontainerAPI)(nil).NewBlockBlobClient), blobName)
}

// NewListBlobsFlatPager mocks base method.
func (m *MockcontainerAPI) NewListBlobsFlatPager(o *container.ListBlobsFlatOptions) flatBlobsPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBlobsFlatPager", o)
	ret0, _ := ret[0].(flatBlobsPager)
	return ret0
}

// NewListBlobsFlatPager indicates an expected call of NewListBlobsFlatPager.
func (mr *MockcontainerAPIMockRecorder) NewListBlobsFlatPager(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBlobsFlatPager", reflect.TypeOf((*MockcontainerAPI)(nil).NewListBlobsFlatPager), o)
}

// NewListBlobsHierarchyPager mocks base method.
func (m *MockcontainerAPI) NewListBlobsHierarchyPager(delimiter string, o *container.ListBlobsHierarchyOptions) hierarchyBlobsPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBlobsHierarchyPager", delimiter, o)
	ret0, _ := ret[0].(hierarchyBlobsPager)
	return ret0
}

// NewListBlobsHierarchyPager indicates an expected call of NewListBlobsHierarchyPager.
func (mr *MockcontainerAPIMockRecorder) NewListBlobsHierarchyPager(delimiter, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBlobsHierarchyPager", reflect.TypeOf((*MockcontainerAPI)(nil).NewListBlobsHierarchyPager), delimiter, o)
}

// MockblobAPI is a mock of blobAPI interface.
type MockblobAPI struct {
	ctrl     *gomock.Controller
	recorder *MockblobAPIMockRecorder
}

// MockblobAPIMockRecorder is the mock recorder for MockblobAPI.
type MockblobAPIMockRecorder struct {
	mock *MockblobAPI
}

// NewMockblobAPI creates a new mock instance.
func NewMockblobAPI(ctrl *gomock.Controller) *MockblobAPI {
	mock := &MockblobAPI{ctrl: ctrl}
	mock.recorder = &MockblobAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockblobAPI) EXPECT() *MockblobAPIMockRecorder {
	return m.recorder
}

// GetSASURL mocks base method.
func (m *MockblobAPI) GetSASURL(permissions sas.BlobPermissions, expiry time.Time, options *blob.GetSASURLOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSASURL", permissions, expiry, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSASURL indicates an expected call of GetSASURL.
func (mr *MockblobAPIMockRecorder) GetSASURL(permissions, expiry, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSASURL", reflect.TypeOf((*MockblobAPI)(nil).GetSASURL), permissions, expiry, options)
}

// MockflatBlobsPager is a mock of flatBlobsPager interface.
type MockflatBlobsPager struct {
	ctrl     *gomock.Controller
	recorder *MockflatBlobsPagerMockRecorder
}

// MockflatBlobsPagerMockRecorder is the mock recorder for MockflatBlobsPager.
type MockflatBlobsPagerMockRecorder struct {
	mock *MockflatBlobsPager
}

// NewMockflatBlobsPager creates a new mock instance.
func NewMockflatBlobsPager(ctrl *gomock.Controller) *MockflatBlobsPager {
	mock := &MockflatBlobsPager{ctrl: ctrl}
	mock.recorder = &MockflatBlobsPagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockflatBlobsPager) EXPECT() *MockflatBlobsPagerMockRecorder {
	return m.recorder
}

// More mocks base method.
func (m *MockflatBlobsPager) More() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "More")
	ret0, _ := ret[0].(bool)
	return ret0
}

// More indicates an expected call of More.
func (mr *MockflatBlobsPagerMockRecorder) More() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "More", reflect.TypeOf((*MockflatBlobsPager)(nil).More))
}

// NextPage mocks base method.
func (m *MockflatBlobsPager) NextPage(ctx context.Context) (azblob.ListBlobsFlatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPage", ctx)
	ret0, _ := ret[0].(azblob.ListBlobsFlatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockflatBlobsPagerMockRecorder) NextPage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockflatBlobsPager)(nil).NextPage), ctx)
}

// MockhierarchyBlobsPager is a mock of hierarchyBlobsPager interface.
type MockhierarchyBlobsPager struct {
	ctrl     *gomock.Controller
	recorder *MockhierarchyBlobsPagerMockRecorder
}

// MockhierarchyBlobsPagerMockRecorder is the mock recorder for MockhierarchyBlobsPager.
type MockhierarchyBlobsPagerMockRecorder struct {
	mock *MockhierarchyBlobsPager
}

// NewMockhierarchyBlobsPager creates a new mock instance.
func NewMockhierarchyBlobsPager(ctrl *gomock.Controller) *MockhierarchyBlobsPager {
	mock := &MockhierarchyBlobsPager{ctrl: ctrl}
	mock.recorder = &MockhierarchyBlobsPagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhierarchyBlobsPager) EXPECT() *MockhierarchyBlobsPagerMockRecorder {
	return m.recorder
}

// More mocks base method.
func (m *MockhierarchyBlobsPager) More() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "More")
	ret0, _ := ret[0].(bool)
	return ret0
}

// More indicates an expected call of More.
func (mr *MockhierarchyBlobsPagerMockRecorder) More() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "More", reflect.TypeOf((*MockhierarchyBlobsPager)(nil).More))
}

// NextPage mocks base method.
func (m *MockhierarchyBlobsPager) NextPage(ctx context.Context) (container.ListBlobsHierarchyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPage", ctx)
	ret0, _ := ret[0].(container.ListBlobsHierarchyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockhierarchyBlobsPagerMockRecorder) NextPage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockhierarchyBlobsPager)(nil).NextPage), ctx)
}

// MockblockBlobAPI is a mock of blockBlobAPI interface.
type MockblockBlobAPI struct {
	ctrl     *gomock.Controller
	recorder *MockblockBlobAPIMockRecorder
}

// MockblockBlobAPIMockRecorder is the mock recorder for MockblockBlobAPI.
type MockblockBlobAPIMockRecorder struct {
	mock *MockblockBlobAPI
}

// NewMockblockBlobAPI creates a new mock instance.
func NewMockblockBlobAPI(ctrl *gomock.Controller) *MockblockBlobAPI {
	mock := &MockblockBlobAPI{ctrl: ctrl}
	mock.recorder = &MockblockBlobAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockblockBlobAPI) EXPECT() *MockblockBlobAPIMockRecorder {
	return m.recorder
}

// CommitBlockList mocks base method.
func (m *MockblockBlobAPI) CommitBlockList(ctx context.Context, base64BlockIDs []string, options *blockblob.CommitBlockListOptions) (blockblob.CommitBlockListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitBlockList", ctx, base64BlockIDs, options)
	ret0, _ := ret[0].(blockblob.CommitBlockListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitBlockList indicates an expected call of CommitBlockList.
func (mr *MockblockBlobAPIMockRecorder) CommitBlockList(ctx, base64BlockIDs, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBlockList", reflect.TypeOf((*MockblockBlobAPI)(nil).CommitBlockList), ctx, base64BlockIDs, options)
}

// Delete mocks base method.
func (m *MockblockBlobAPI) Delete(ctx context.Context, options *blob.DeleteOptions) (blob.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, options)
	ret0, _ := ret[0].(blob.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockblockBlobAPIMockRecorder) Delete(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockblockBlobAPI)(nil).Delete), ctx, options)
}

// DownloadStream mocks base method.
func (m *MockblockBlobAPI) DownloadStream(ctx context.Context, o *blob.DownloadStreamOptions) (blob.DownloadStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadStream", ctx, o)
	ret0, _ := ret[0].(blob.DownloadStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadStream indicates an expected call of DownloadStream.
func (mr *MockblockBlobAPIMockRecorder) DownloadStream(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadStream", reflect.TypeOf((*MockblockBlobAPI)(nil).DownloadStream), ctx, o)
}

// GetBlockList mocks base method.
func (m *MockblockBlobAPI) GetBlockList(ctx context.Context, listType blockblob.BlockListType, options *blockblob.GetBlockListOptions) (blockblob.GetBlockListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockList", ctx, listType, options)
	ret0, _ := ret[0].(blockblob.GetBlockListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockList indicates an expected call of GetBlockList.
func (mr *MockblockBlobAPIMockRecorder) GetBlockList(ctx, listType, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockList", reflect.TypeOf((*MockblockBlobAPI)(nil).GetBlockList), ctx, listType, options)
}

// GetProperties mocks base method.
func (m *MockblockBlobAPI) GetProperties(ctx context.Context, options *blob.GetPropertiesOptions) (blob.GetPropertiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties", ctx, options)
	ret0, _ := ret[0].(blob.GetPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperties indicates an expected call of GetProperties.
func (mr *MockblockBlobAPIMockRecorder) GetProperties(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockblockBlobAPI)(nil).GetProperties), ctx, options)
}

// StageBlock mocks base method.
func (m *MockblockBlobAPI) StageBlock(ctx context.Context, base64BlockID string, body io.ReadSeekCloser, options *blockblob.StageBlockOptions) (blockblob.StageBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageBlock", ctx, base64BlockID, body, options)
	ret0, _ := ret[0].(blockblob.StageBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageBlock indicates an expected call of StageBlock.
func (mr *MockblockBlobAPIMockRecorder) StageBlock(ctx, base64BlockID, body, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageBlock", reflect.TypeOf((*MockblockBlobAPI)(nil).StageBlock), ctx, base64BlockID, body, options)
}

// StageBlockFromURL mocks base method.
func (m *MockblockBlobAPI) StageBlockFromURL(ctx context.Context, base64BlockID, sourceURL string, options *blockblob.StageBlockFromURLOptions) (blockblob.StageBlockFromURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageBlockFromURL", ctx, base64BlockID, sourceURL, options)
	ret0, _ := ret[0].(blockblob.StageBlockFromURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageBlockFromURL indicates an expected call of StageBlockFromURL.
func (mr *MockblockBlobAPIMockRecorder) StageBlockFromURL(ctx, base64BlockID, sourceURL, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageBlockFromURL", reflect.TypeOf((*MockblockBlobAPI)(nil).StageBlockFromURL), ctx, base64BlockID, sourceURL, options)
}

// URL mocks base method.
func (m *MockblockBlobAPI) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockblockBlobAPIMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockblockBlobAPI)(nil).URL))
}

// Upload mocks base method.
func (m *MockblockBlobAPI) Upload(ctx context.Context, body io.ReadSeekCloser, options *blockblob.UploadOptions) (blockblob.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, body, options)
	ret0, _ := ret[0].(blockblob.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockblockBlobAPIMockRecorder) Upload(ctx, body, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockblockBlobAPI)(nil).Upload), ctx, body, options)
}

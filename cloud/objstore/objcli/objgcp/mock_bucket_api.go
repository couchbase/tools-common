// Code generated by mockery v2.53.3. DO NOT EDIT.

package objgcp

import (
	context "context"

	storage "cloud.google.com/go/storage"
	mock "github.com/stretchr/testify/mock"
)

// mockBucketAPI is an autogenerated mock type for the bucketAPI type
type mockBucketAPI struct {
	mock.Mock
}

// Attrs provides a mock function with given fields: ctx
func (_m *mockBucketAPI) Attrs(ctx context.Context) (*storage.BucketAttrs, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Attrs")
	}

	var r0 *storage.BucketAttrs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*storage.BucketAttrs, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *storage.BucketAttrs); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.BucketAttrs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Object provides a mock function with given fields: key
func (_m *mockBucketAPI) Object(key string) objectAPI {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Object")
	}

	var r0 objectAPI
	if rf, ok := ret.Get(0).(func(string) objectAPI); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(objectAPI)
		}
	}

	return r0
}

// Objects provides a mock function with given fields: ctx, query
func (_m *mockBucketAPI) Objects(ctx context.Context, query *storage.Query) objectIteratorAPI {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Objects")
	}

	var r0 objectIteratorAPI
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Query) objectIteratorAPI); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(objectIteratorAPI)
		}
	}

	return r0
}

// newMockBucketAPI creates a new instance of mockBucketAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBucketAPI(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockBucketAPI {
	mock := &mockBucketAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

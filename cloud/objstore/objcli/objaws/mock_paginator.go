// Code generated by mockery v2.45.0. DO NOT EDIT.

package objaws

import (
	context "context"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	mock "github.com/stretchr/testify/mock"
)

// mockPaginator is an autogenerated mock type for the paginator type
type mockPaginator[T interface{}] struct {
	mock.Mock
}

// HasMorePages provides a mock function with given fields:
func (_m *mockPaginator[T]) HasMorePages() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasMorePages")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NextPage provides a mock function with given fields: _a0, _a1
func (_m *mockPaginator[T]) NextPage(_a0 context.Context, _a1 ...func(*s3.Options)) (T, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NextPage")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...func(*s3.Options)) (T, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...func(*s3.Options)) T); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...func(*s3.Options)) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockPaginator creates a new instance of mockPaginator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPaginator[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockPaginator[T] {
	mock := &mockPaginator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.23.1. DO NOT EDIT.

package objcli

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	objval "github.com/couchbase/tools-common/cloud/objstore/objval"

	regexp "regexp"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// AbortMultipartUpload provides a mock function with given fields: ctx, bucket, id, key
func (_m *MockClient) AbortMultipartUpload(ctx context.Context, bucket, id, key string) error {
	ret := _m.Called(ctx, bucket, id, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, bucket, id, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppendToObject provides a mock function with given fields: ctx, bucket, key, data
func (_m *MockClient) AppendToObject(ctx context.Context, bucket, key string, data io.ReadSeeker) error {
	ret := _m.Called(ctx, bucket, key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.ReadSeeker) error); ok {
		r0 = rf(ctx, bucket, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteMultipartUpload provides a mock function with given fields: ctx, bucket, id, key, parts
func (_m *MockClient) CompleteMultipartUpload(ctx context.Context, bucket, id, key string, parts ...objval.Part) error {
	_va := make([]interface{}, len(parts))
	for _i := range parts {
		_va[_i] = parts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, bucket, id, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...objval.Part) error); ok {
		r0 = rf(ctx, bucket, id, key, parts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMultipartUpload provides a mock function with given fields: ctx, bucket, key
func (_m *MockClient) CreateMultipartUpload(ctx context.Context, bucket, key string) (string, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, bucket, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDirectory provides a mock function with given fields: ctx, bucket, prefix
func (_m *MockClient) DeleteDirectory(ctx context.Context, bucket, prefix string) error {
	ret := _m.Called(ctx, bucket, prefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucket, prefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteObjects provides a mock function with given fields: ctx, bucket, keys
func (_m *MockClient) DeleteObjects(ctx context.Context, bucket string, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, bucket)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, bucket, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetObject provides a mock function with given fields: ctx, bucket, key, br
func (_m *MockClient) GetObject(ctx context.Context, bucket, key string, br *objval.ByteRange) (*objval.Object, error) {
	ret := _m.Called(ctx, bucket, key, br)

	var r0 *objval.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *objval.ByteRange) (*objval.Object, error)); ok {
		return rf(ctx, bucket, key, br)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *objval.ByteRange) *objval.Object); ok {
		r0 = rf(ctx, bucket, key, br)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objval.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *objval.ByteRange) error); ok {
		r1 = rf(ctx, bucket, key, br)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectAttrs provides a mock function with given fields: ctx, bucket, key
func (_m *MockClient) GetObjectAttrs(ctx context.Context, bucket, key string) (*objval.ObjectAttrs, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 *objval.ObjectAttrs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*objval.ObjectAttrs, error)); ok {
		return rf(ctx, bucket, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *objval.ObjectAttrs); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objval.ObjectAttrs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IterateObjects provides a mock function with given fields: ctx, bucket, prefix, delimiter, include, exclude, fn
func (_m *MockClient) IterateObjects(ctx context.Context, bucket, prefix, delimiter string, include, exclude []*regexp.Regexp, fn IterateFunc) error {
	ret := _m.Called(ctx, bucket, prefix, delimiter, include, exclude, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*regexp.Regexp, []*regexp.Regexp, IterateFunc) error); ok {
		r0 = rf(ctx, bucket, prefix, delimiter, include, exclude, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListParts provides a mock function with given fields: ctx, bucket, id, key
func (_m *MockClient) ListParts(ctx context.Context, bucket, id, key string) ([]objval.Part, error) {
	ret := _m.Called(ctx, bucket, id, key)

	var r0 []objval.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]objval.Part, error)); ok {
		return rf(ctx, bucket, id, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []objval.Part); ok {
		r0 = rf(ctx, bucket, id, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]objval.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, bucket, id, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider provides a mock function with given fields:
func (_m *MockClient) Provider() objval.Provider {
	ret := _m.Called()

	var r0 objval.Provider
	if rf, ok := ret.Get(0).(func() objval.Provider); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(objval.Provider)
	}

	return r0
}

// PutObject provides a mock function with given fields: ctx, bucket, key, body
func (_m *MockClient) PutObject(ctx context.Context, bucket, key string, body io.ReadSeeker) error {
	ret := _m.Called(ctx, bucket, key, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.ReadSeeker) error); ok {
		r0 = rf(ctx, bucket, key, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadPart provides a mock function with given fields: ctx, bucket, id, key, number, body
func (_m *MockClient) UploadPart(ctx context.Context, bucket, id, key string, number int, body io.ReadSeeker) (objval.Part, error) {
	ret := _m.Called(ctx, bucket, id, key, number, body)

	var r0 objval.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, io.ReadSeeker) (objval.Part, error)); ok {
		return rf(ctx, bucket, id, key, number, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, io.ReadSeeker) objval.Part); ok {
		r0 = rf(ctx, bucket, id, key, number, body)
	} else {
		r0 = ret.Get(0).(objval.Part)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, io.ReadSeeker) error); ok {
		r1 = rf(ctx, bucket, id, key, number, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadPartCopy provides a mock function with given fields: ctx, bucket, id, dst, src, number, br
func (_m *MockClient) UploadPartCopy(ctx context.Context, bucket, id, dst, src string, number int, br *objval.ByteRange) (objval.Part, error) {
	ret := _m.Called(ctx, bucket, id, dst, src, number, br)

	var r0 objval.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, int, *objval.ByteRange) (objval.Part, error)); ok {
		return rf(ctx, bucket, id, dst, src, number, br)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, int, *objval.ByteRange) objval.Part); ok {
		r0 = rf(ctx, bucket, id, dst, src, number, br)
	} else {
		r0 = ret.Get(0).(objval.Part)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, int, *objval.ByteRange) error); ok {
		r1 = rf(ctx, bucket, id, dst, src, number, br)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

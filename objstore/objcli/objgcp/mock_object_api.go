// Code generated by mockery v2.9.4. DO NOT EDIT.

package objgcp

import (
	context "context"

	storage "cloud.google.com/go/storage"
	mock "github.com/stretchr/testify/mock"
)

// mockObjectAPI is an autogenerated mock type for the objectAPI type
type mockObjectAPI struct {
	mock.Mock
}

// Attrs provides a mock function with given fields: ctx
func (_m *mockObjectAPI) Attrs(ctx context.Context) (*storage.ObjectAttrs, error) {
	ret := _m.Called(ctx)

	var r0 *storage.ObjectAttrs
	if rf, ok := ret.Get(0).(func(context.Context) *storage.ObjectAttrs); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectAttrs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComposerFrom provides a mock function with given fields: srcs
func (_m *mockObjectAPI) ComposerFrom(srcs ...objectAPI) composeAPI {
	_va := make([]interface{}, len(srcs))
	for _i := range srcs {
		_va[_i] = srcs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 composeAPI
	if rf, ok := ret.Get(0).(func(...objectAPI) composeAPI); ok {
		r0 = rf(srcs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(composeAPI)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: ctx
func (_m *mockObjectAPI) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRangeReader provides a mock function with given fields: ctx, offset, length
func (_m *mockObjectAPI) NewRangeReader(ctx context.Context, offset, length int64) (readerAPI, error) {
	ret := _m.Called(ctx, offset, length)

	var r0 readerAPI
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) readerAPI); ok {
		r0 = rf(ctx, offset, length)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(readerAPI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, offset, length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWriter provides a mock function with given fields: ctx
func (_m *mockObjectAPI) NewWriter(ctx context.Context) writerAPI {
	ret := _m.Called(ctx)

	var r0 writerAPI
	if rf, ok := ret.Get(0).(func(context.Context) writerAPI); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(writerAPI)
		}
	}

	return r0
}

// Code generated by mockery v2.10.4. DO NOT EDIT.

package objazure

import (
	context "context"

	azblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// mockBlobAPI is an autogenerated mock type for the blobAPI type
type mockBlobAPI struct {
	mock.Mock
}

// CommitBlockList provides a mock function with given fields: ctx, base64BlockIDs, options
func (_m *mockBlobAPI) CommitBlockList(ctx context.Context, base64BlockIDs []string, options azblob.BlockBlobCommitBlockListOptions) (azblob.BlockBlobCommitBlockListResponse, error) {
	ret := _m.Called(ctx, base64BlockIDs, options)

	var r0 azblob.BlockBlobCommitBlockListResponse
	if rf, ok := ret.Get(0).(func(context.Context, []string, azblob.BlockBlobCommitBlockListOptions) azblob.BlockBlobCommitBlockListResponse); ok {
		r0 = rf(ctx, base64BlockIDs, options)
	} else {
		r0 = ret.Get(0).(azblob.BlockBlobCommitBlockListResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, azblob.BlockBlobCommitBlockListOptions) error); ok {
		r1 = rf(ctx, base64BlockIDs, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, options
func (_m *mockBlobAPI) Delete(ctx context.Context, options azblob.BlobDeleteOptions) (azblob.BlobDeleteResponse, error) {
	ret := _m.Called(ctx, options)

	var r0 azblob.BlobDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, azblob.BlobDeleteOptions) azblob.BlobDeleteResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(azblob.BlobDeleteResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, azblob.BlobDeleteOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Download provides a mock function with given fields: ctx, options
func (_m *mockBlobAPI) Download(ctx context.Context, options azblob.BlobDownloadOptions) (azblob.BlobDownloadResponse, error) {
	ret := _m.Called(ctx, options)

	var r0 azblob.BlobDownloadResponse
	if rf, ok := ret.Get(0).(func(context.Context, azblob.BlobDownloadOptions) azblob.BlobDownloadResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(azblob.BlobDownloadResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, azblob.BlobDownloadOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockList provides a mock function with given fields: ctx, listType, options
func (_m *mockBlobAPI) GetBlockList(ctx context.Context, listType azblob.BlockListType, options azblob.BlockBlobGetBlockListOptions) (azblob.BlockBlobGetBlockListResponse, error) {
	ret := _m.Called(ctx, listType, options)

	var r0 azblob.BlockBlobGetBlockListResponse
	if rf, ok := ret.Get(0).(func(context.Context, azblob.BlockListType, azblob.BlockBlobGetBlockListOptions) azblob.BlockBlobGetBlockListResponse); ok {
		r0 = rf(ctx, listType, options)
	} else {
		r0 = ret.Get(0).(azblob.BlockBlobGetBlockListResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, azblob.BlockListType, azblob.BlockBlobGetBlockListOptions) error); ok {
		r1 = rf(ctx, listType, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProperties provides a mock function with given fields: ctx, options
func (_m *mockBlobAPI) GetProperties(ctx context.Context, options azblob.BlobGetPropertiesOptions) (azblob.BlobGetPropertiesResponse, error) {
	ret := _m.Called(ctx, options)

	var r0 azblob.BlobGetPropertiesResponse
	if rf, ok := ret.Get(0).(func(context.Context, azblob.BlobGetPropertiesOptions) azblob.BlobGetPropertiesResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(azblob.BlobGetPropertiesResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, azblob.BlobGetPropertiesOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StageBlock provides a mock function with given fields: ctx, base64BlockID, body, options
func (_m *mockBlobAPI) StageBlock(ctx context.Context, base64BlockID string, body io.ReadSeeker, options azblob.BlockBlobStageBlockOptions) (azblob.BlockBlobStageBlockResponse, error) {
	ret := _m.Called(ctx, base64BlockID, body, options)

	var r0 azblob.BlockBlobStageBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.ReadSeeker, azblob.BlockBlobStageBlockOptions) azblob.BlockBlobStageBlockResponse); ok {
		r0 = rf(ctx, base64BlockID, body, options)
	} else {
		r0 = ret.Get(0).(azblob.BlockBlobStageBlockResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.ReadSeeker, azblob.BlockBlobStageBlockOptions) error); ok {
		r1 = rf(ctx, base64BlockID, body, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StageBlockFromURL provides a mock function with given fields: ctx, base64BlockID, sourceURL, length, options
func (_m *mockBlobAPI) StageBlockFromURL(ctx context.Context, base64BlockID, sourceURL string, length int64, options azblob.BlockBlobStageBlockFromURLOptions) (azblob.BlockBlobStageBlockFromURLResponse, error) {
	ret := _m.Called(ctx, base64BlockID, sourceURL, length, options)

	var r0 azblob.BlockBlobStageBlockFromURLResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, azblob.BlockBlobStageBlockFromURLOptions) azblob.BlockBlobStageBlockFromURLResponse); ok {
		r0 = rf(ctx, base64BlockID, sourceURL, length, options)
	} else {
		r0 = ret.Get(0).(azblob.BlockBlobStageBlockFromURLResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, azblob.BlockBlobStageBlockFromURLOptions) error); ok {
		r1 = rf(ctx, base64BlockID, sourceURL, length, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URL provides a mock function with given fields:
func (_m *mockBlobAPI) URL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Upload provides a mock function with given fields: ctx, body, options
func (_m *mockBlobAPI) Upload(ctx context.Context, body io.ReadSeeker, options azblob.BlockBlobUploadOptions) (azblob.BlockBlobUploadResponse, error) {
	ret := _m.Called(ctx, body, options)

	var r0 azblob.BlockBlobUploadResponse
	if rf, ok := ret.Get(0).(func(context.Context, io.ReadSeeker, azblob.BlockBlobUploadOptions) azblob.BlockBlobUploadResponse); ok {
		r0 = rf(ctx, body, options)
	} else {
		r0 = ret.Get(0).(azblob.BlockBlobUploadResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, io.ReadSeeker, azblob.BlockBlobUploadOptions) error); ok {
		r1 = rf(ctx, body, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

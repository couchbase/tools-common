// Code generated by mockery v2.9.4. DO NOT EDIT.

package objazure

import (
	context "context"

	azblob "github.com/Azure/azure-storage-blob-go/azblob"

	mock "github.com/stretchr/testify/mock"
)

// mockBlobAPI is an autogenerated mock type for the blobAPI type
type mockBlobAPI struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, deleteOptions, ac
func (_m *mockBlobAPI) Delete(ctx context.Context, deleteOptions azblob.DeleteSnapshotsOptionType, ac azblob.BlobAccessConditions) (*azblob.BlobDeleteResponse, error) {
	ret := _m.Called(ctx, deleteOptions, ac)

	var r0 *azblob.BlobDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, azblob.DeleteSnapshotsOptionType, azblob.BlobAccessConditions) *azblob.BlobDeleteResponse); ok {
		r0 = rf(ctx, deleteOptions, ac)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azblob.BlobDeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, azblob.DeleteSnapshotsOptionType, azblob.BlobAccessConditions) error); ok {
		r1 = rf(ctx, deleteOptions, ac)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Download provides a mock function with given fields: ctx, offset, count, ac, rangeGetContentMD5, cpk
func (_m *mockBlobAPI) Download(ctx context.Context, offset, count int64, ac azblob.BlobAccessConditions, rangeGetContentMD5 bool, cpk azblob.ClientProvidedKeyOptions) (*azblob.DownloadResponse, error) {
	ret := _m.Called(ctx, offset, count, ac, rangeGetContentMD5, cpk)

	var r0 *azblob.DownloadResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, azblob.BlobAccessConditions, bool, azblob.ClientProvidedKeyOptions) *azblob.DownloadResponse); ok {
		r0 = rf(ctx, offset, count, ac, rangeGetContentMD5, cpk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azblob.DownloadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, azblob.BlobAccessConditions, bool, azblob.ClientProvidedKeyOptions) error); ok {
		r1 = rf(ctx, offset, count, ac, rangeGetContentMD5, cpk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProperties provides a mock function with given fields: ctx, ac, cpk
func (_m *mockBlobAPI) GetProperties(ctx context.Context, ac azblob.BlobAccessConditions, cpk azblob.ClientProvidedKeyOptions) (*azblob.BlobGetPropertiesResponse, error) {
	ret := _m.Called(ctx, ac, cpk)

	var r0 *azblob.BlobGetPropertiesResponse
	if rf, ok := ret.Get(0).(func(context.Context, azblob.BlobAccessConditions, azblob.ClientProvidedKeyOptions) *azblob.BlobGetPropertiesResponse); ok {
		r0 = rf(ctx, ac, cpk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azblob.BlobGetPropertiesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, azblob.BlobAccessConditions, azblob.ClientProvidedKeyOptions) error); ok {
		r1 = rf(ctx, ac, cpk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToBlockBlobAPI provides a mock function with given fields:
func (_m *mockBlobAPI) ToBlockBlobAPI() blockBlobAPI {
	ret := _m.Called()

	var r0 blockBlobAPI
	if rf, ok := ret.Get(0).(func() blockBlobAPI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blockBlobAPI)
		}
	}

	return r0
}
